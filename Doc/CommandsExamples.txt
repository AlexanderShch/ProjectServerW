===============================================================================
СИСТЕМА КОМАНД УПРАВЛЕНИЯ ВНЕШНИМ УСТРОЙСТВОМ
===============================================================================

СТРУКТУРА КОМАНДЫ:
------------------
Каждая команда состоит из:
1. Байт типа команды (commandType)
2. Байт кода команды (commandCode)
3. Байт длины данных параметров (dataLength)
4. Данные параметров (data[]) - до 59 байт
5. CRC16 для проверки целостности (2 байта)

Общая длина команды: 5 + длина параметров байт


ТИПЫ КОМАНД (CommandType):
---------------------------
- PROG_CONTROL (0x01)        - Команды управления программой (СТАРТ, СТОП и т.д.)
- CONFIGURATION (0x02)  - Команды конфигурации
- REQUEST (0x03)        - Команды запроса данных
- DEVICE_CONTROL (0x04)       - Команды управления устройствами


КОДЫ КОМАНД УПРАВЛЕНИЯ (ControlCommand):
-----------------------------------------
- START (0x01)   - Запуск работы устройства
- STOP (0x02)    - Остановка работы устройства
- PAUSE (0x03)   - Приостановка работы
- RESUME (0x04)  - Возобновление после паузы
- RESET (0x05)   - Сброс устройства


КОДЫ КОМАНД КОНФИГУРАЦИИ (ConfigCommand):
------------------------------------------
- SET_TEMPERATURE (0x01) - Установить целевую температуру
- SET_INTERVAL (0x02)    - Установить интервал измерений
- SET_MODE (0x03)        - Установить режим работы


КОДЫ КОМАНД ЗАПРОСА (RequestCommand):
--------------------------------------
- GET_STATUS (0x01)  - Запросить текущий статус устройства
- GET_VERSION (0x02) - Запросить версию прошивки
- GET_DATA (0x03)  - Запросить данные

===============================================================================
ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ В C++/CLI
===============================================================================

1. ОТПРАВКА КОМАНДЫ СТАРТ (без параметров):
--------------------------------------------
void SendStartExample() {
    // Создать команду START
    Command cmd = CreateControlCommand(ControlCommand::START);
    
    // Отправить команду
    SendCommand(cmd, "START");
}


2. ОТПРАВКА КОМАНДЫ С ОДНИМ БАЙТОМ ПАРАМЕТРА:
-----------------------------------------------
void SendPauseWithMode() {
    // Создать команду PAUSE с параметром режима = 1
    Command cmd = CreateControlCommandWithParam(ControlCommand::PAUSE, 1);
    
    // Отправить команду
    SendCommand(cmd, "PAUSE");
}


3. УСТАНОВКА ТЕМПЕРАТУРЫ (параметр float):
-------------------------------------------
void SetTargetTemperature(float temperature) {
    // Создать команду установки температуры
    Command cmd = CreateConfigCommandFloat(ConfigCommand::SET_TEMPERATURE, temperature);
    
    // Отправить команду
    SendCommand(cmd, "SET_TEMPERATURE");
}


4. УСТАНОВКА ИНТЕРВАЛА ИЗМЕРЕНИЙ (параметр int):
-------------------------------------------------
void SetMeasurementInterval(int intervalSeconds) {
    // Создать команду установки интервала
    Command cmd = CreateConfigCommandInt(ConfigCommand::SET_INTERVAL, intervalSeconds);
    
    // Отправить команду
    SendCommand(cmd, "SET_INTERVAL");
}


5. ЗАПРОС СТАТУСА УСТРОЙСТВА:
-------------------------------
void RequestDeviceStatus() {
    // Создать команду запроса статуса
    Command cmd = CreateRequestCommand(RequestCommand::GET_STATUS);
    
    // Отправить команду
    SendCommand(cmd, "GET_STATUS");
}


6. ОТПРАВКА КОМАНДЫ С НЕСКОЛЬКИМИ ПАРАМЕТРАМИ:
------------------------------------------------
void SendCustomCommand() {
    Command cmd;
    cmd.commandType = CommandType::CONFIGURATION;
    cmd.commandCode = ConfigCommand::SET_MODE;
    cmd.dataLength = 3;
    
    // Задаем параметры вручную
    cmd.data[0] = 0x01;  // Режим работы
    cmd.data[1] = 0xFF;  // Флаги
    cmd.data[2] = 0x0A;  // Приоритет
    
    // Отправить команду
    SendCommand(cmd, "SET_MODE");
}


===============================================================================
ДОБАВЛЕНИЕ НОВЫХ КОМАНД
===============================================================================

ШАГ 1: Добавить код новой команды в Commands.h
------------------------------------------------
Например, добавить команду калибровки:

namespace ControlCommand {
    const uint8_t START = 0x01;
    const uint8_t STOP = 0x02;
    const uint8_t PAUSE = 0x03;
    const uint8_t RESUME = 0x04;
    const uint8_t RESET = 0x05;
    const uint8_t CALIBRATE = 0x06;  // <-- НОВАЯ КОМАНДА
}


ШАГ 2: Создать метод в DataForm.h
-----------------------------------
void SendCalibrateCommand(float calibrationValue);


ШАГ 3: Реализовать метод в DataForm.cpp
-----------------------------------------
void ProjectServerW::DataForm::SendCalibrateCommand(float calibrationValue) {
    // Создаем команду калибровки с параметром
    Command cmd = CreateConfigCommandFloat(ControlCommand::CALIBRATE, calibrationValue);
    
    // Отправляем команду
    if (SendCommand(cmd, "CALIBRATE")) {
        // Дополнительные действия после успешной отправки
        MessageBox::Show("Калибровка запущена!");
    }
}


ШАГ 4: Добавить кнопку на форму и вызвать метод
-------------------------------------------------
private: System::Void buttonCalibrate_Click(System::Object^ sender, System::EventArgs^ e) {
    SendCalibrateCommand(25.5f);  // Передать значение калибровки
}


===============================================================================
ФОРМАТ ПЕРЕДАЧИ КОМАНДЫ ПО СЕТИ
===============================================================================

Пример команды START (тип=0x01, код=0x01, без параметров):

Байты:  01 01 00 XX XX
        |  |  |  |  |
        |  |  |  +--+-- CRC16 (вычисляется автоматически)
        |  |  +-------- Длина данных (0 байт)
        |  +----------- Код команды (START = 0x01)
        +-------------- Тип команды (CONTROL = 0x01)


Пример команды установки температуры 25.5°C:

Байты:  02 01 04 00 00 CC 41 XX XX
        |  |  |  +----------+  |  |
        |  |  |       |        +--+-- CRC16
        |  |  |       +-------------- Float значение (25.5 в IEEE 754)
        |  |  +---------------------- Длина данных (4 байта для float)
        |  +------------------------- Код команды (SET_TEMPERATURE = 0x01)
        +---------------------------- Тип команды (CONFIGURATION = 0x02)


===============================================================================
РЕКОМЕНДАЦИИ
===============================================================================

1. Всегда используйте функцию SendCommand() для отправки команд - она автоматически
   вычисляет CRC и обрабатывает ошибки.

2. Для команд без параметров используйте CreateControlCommand() или CreateRequestCommand().

3. Для команд с параметрами используйте соответствующие функции:
   - CreateControlCommandWithParam() - для одного байта
   - CreateConfigCommandInt() - для целого числа (4 байта)
   - CreateConfigCommandFloat() - для числа с плавающей точкой (4 байта)

4. Для сложных команд создавайте структуру Command вручную и заполняйте поля.

5. Документируйте все новые коды команд в Commands.h.

6. Тестируйте каждую новую команду перед использованием в production.

===============================================================================

